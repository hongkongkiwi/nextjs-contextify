name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

# Ensure only one CI run per branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4.1.0
      # pnpm version will be read from package.json packageManager field
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4.4.0
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Setup Xvfb for VS Code tests
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        echo "DISPLAY=:99" >> $GITHUB_ENV
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
      if: matrix.node-version == '22.x'
      
    - name: Run linting
      run: pnpm run lint
      
    - name: Run type checking
      run: pnpm run typecheck
      
    - name: Build extension
      run: pnpm run build
      
    - name: Run unit tests
      run: pnpm run test:unit
      
    - name: Run integration tests
      run: pnpm run test:ci
      if: matrix.node-version == '22.x'
      env:
        DISPLAY: ":99"
      
    - name: Run test coverage
      run: pnpm run test:coverage
      if: matrix.node-version == '22.x'
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5.4.3
      if: matrix.node-version == '22.x'
      with:
        files: ./coverage/lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Security audit
      run: pnpm run security:check
      
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4.1.0
      # pnpm version will be read from package.json packageManager field
        
    - name: Setup Node.js (from .nvmrc)
      uses: actions/setup-node@v4.4.0
      with:
        node-version-file: '.nvmrc'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build extension
      run: pnpm run build:production
      
    - name: Package extension
      run: pnpm run package
      
    - name: Upload VSIX artifact
      uses: actions/upload-artifact@v4.6.2
      with:
        name: vsix-package
        path: '*.vsix'
        retention-days: 30
        
  publish:
    name: Publish Extension
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4.1.0
      # pnpm version will be read from package.json packageManager field
        
    - name: Setup Node.js (from .nvmrc)
      uses: actions/setup-node@v4.4.0
      with:
        node-version-file: '.nvmrc'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Download VSIX artifact
      uses: actions/download-artifact@v4.3.0
      with:
        name: vsix-package
        
    - name: Publish to VS Code Marketplace
      run: pnpm run publish:vscode
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
        
    - name: Publish to Open VSX Registry
      run: pnpm run publish:openvsx
      env:
        OVSX_PAT: ${{ secrets.OVSX_PAT }}
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.31.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4.1.0
      # pnpm version will be read from package.json packageManager field
        
    - name: Setup Node.js (from .nvmrc)
      uses: actions/setup-node@v4.4.0
      with:
        node-version-file: '.nvmrc'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Analyze code quality
      run: pnpm run analyze:deps
      
    - name: Generate documentation
      run: pnpm run docs:generate
      
    - name: Deploy docs to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4.0.0
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs 